// 这个函数截取一段字符串的数字, 从后往前, 3位截成一段插入一个逗号
// 位于中间, 后面的全都要, 用索引, s[n:]
// 位于中间, 前面的全都要, 用容量, s[:n]
package main

// 12345=>12,345
// 如果是3个元素就返回, 如果是4个元素, 后3个元素不要, 只要1个, 123456, 12345678
// 123456789=>123456
// 123456=>123
// 123,456
func comma(s string) string {
	n := len(s)
	if n <= 3 {
		return s
	}
	// 从头到中间截取, 通过容量, s[:n-3]
	// 前面的不要, 从中间要到末尾, 通过索引
	// comma是一个递归函数,返回段是return 3
	return comma(s[:n-3]) + "," + s[n-3:]
}

// 递归函数是如何“分解 + 合并”的过程: 如果输入123456789, 是怎么递归变成123,456,789

//                                                              (7) 最终函数返回 "123,456,789"
// (1) comma("123456789") n=9>3 ->继续递归
//     return comma(s[:6]),+,s[6:]         comma(123456)+,+789  (6) return "123,456"+","+789  向上返回 "123,456,789"
// (2) comma("123456")    n=6>3 ->继续递归
//     return comma(s[:3]),+,s[3:]         comma(123)+,+456     (5) return "123"+","+456      向上返回 "123,456"
// (3) comma("123")       n=3   ->终止递归
// (4) return "123" 向上返回

// comma("123456789")
// ↳ comma("123456") + "," + "789"
//    ↳ comma("123") + "," + "456"
//       ↳ "123"
//    ← "123,456"
// ← "123,456,789"
